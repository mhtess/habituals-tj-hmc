

var utterancePrior = function() {
  var utterances = ["habitual", "mm"]  
     // var utterances = ["generic is true",
     //              "generic is false"]  
  return flip(0.5) ? utterances[0] : utterances[1]
}

var meaning = function(utt,state, threshold) {
  return _.isNumber(utt) ? state == utt :
  // utt=="habitual"? state<threshold :
  utt=="habitual"? state>threshold :
  utt=="not habitual"? state<=threshold :
  utt=='mm'? true:
  utt=='some'? state>0:
  utt=='most'? state>= 0.5:
  utt=='all'? state >= 0.99:
  true
}

var listener0 = cache(function(utterance, threshold, prior) {
  Enumerate(function(){
    var state = sample(prior)
    var m = meaning(utterance, state, threshold)
    // console.log("L0 -- "+ utterance + "   " + state + "   " + m)
    condition(m)
    return state
  })
}, 10000)

// var speaker1 = cache(function(state, threshold, prior,s1optimality) {
var speaker1 = function(state, threshold, prior, s1optimality) {
  Enumerate(function(){
    var utterance = utterancePrior()
    var L0 = listener0(utterance, threshold, prior)
    factor(s1optimality*L0.score([],state))
    // factor(L0.score([],state))
    return utterance
  })
}
// }, 10000)

var listener1 = function(utterance, prior, s1optimality, thetaBins) {
  Enumerate(function(){
    var state = sample(prior)
    var threshold = uniformDraw(thetaBins)
    var S1 = speaker1(state, threshold, prior, s1optimality)
    // var S1_opt = softmaxERP(S1, s1optimality)
    factor(S1.score([],utterance))
    return state
  })
}//, 10000)

var speaker2 = function(frequency, prior, s1optimality,s2optimality, thetaBins){
  Enumerate(function(){
    // console.log(frequency)
    // console.log(thetaBins)
    // console.log(map(function(s){return [s, Math.exp(prior.score([], s))]}, prior.support()))
    var utterance = utterancePrior()
    // console.log(utterance)
    var wL1 = listener1(utterance, prior, s1optimality, thetaBins)
    // console.log(map(function(s){return [s, Math.exp(wL1.score([], s))]}, wL1.support()))
    factor(s2optimality*wL1.score([], frequency))
    return utterance
  })
}